#+TITLE: Emacs configuration file
#+AUTHOR: Dmitry Alexeev
#+BABEL: :cache yes
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \usepackage{inconsolata}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+PROPERTY: header-args :tangle yes

#+BEGIN_SRC emacs-lisp :tangle no
;; We can't tangle without org!
(require 'org)
;; Open the configuration
(find-file (concat user-emacs-directory "init.org"))
;; tangle it
(org-babel-tangle)
;; load it
(load-file (concat user-emacs-directory "init.el"))
;; finally byte-compile it
(byte-compile-file (concat user-emacs-directory "init.el"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;;; -*- lexical-binding: t -*-
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun tangle-init ()
  "If the current buffer is 'init.org' the code-blocks are
  tangled, and the tangled file is compiled."
  (when (equal (buffer-file-name)
	       (expand-file-name (concat user-emacs-directory "init.org")))
    ;; Avoid running hooks when tangling.
    (let ((prog-mode-hook nil))
      (org-babel-tangle)
      (byte-compile-file (concat user-emacs-directory "init.el")))))

(add-hook 'after-save-hook 'tangle-init)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(require 'cl-lib)
(require 'package)
(package-initialize)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; (add-to-list 'package-archives
  ;; 	     '("melpa" . "https://melpa.org/packages/"))
  (add-to-list 'package-archives
	       '("melpa-stable" . "https://stable.melpa.org/packages/"))
  ;; (add-to-list 'package-pinned-packages '(cider . "melpa-stable") t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (let* ((package--builtins nil)
	 (packages
	  '(auto-compile         ; automatically compile Emacs Lisp libraries
	    org                  ; Outline-based notes management and organizer
	    cider                ; Clojure Interactive Development Environment
	    clj-refactor         ; Refactoring functions for Clojure
	    company              ; Modular text completion framework
	    ivy                  ; Incremental Vertical completion
	    swiper               ; Isearch with an overview
	    counsel              ; Various completion functions using Ivy
	    avy                  ; jump to visible characters
	    magit                ; control Git from Emacs
	    git-timemachine      ; Walk through git revisions of a file
	    git-link             ; get a link to the location in the file on GitHub
	    rainbow-delimiters   ; Highlight brackets according to their depth
	    paredit              ; minor mode for editing parentheses
	    projectile           ; Manage and navigate projects in Emacs easily
	    yaml-mode            ; Major mode for editing YAML files
	    which-key            ; Display available keybindings in popup
	    ; kubel                ; Controlling Kubernetes with limited permissions
	    modus-themes
	    ace-window
	    ripgrep
	    org-tree-slide
	    sql-indent
	    terraform-mode
	    )))
    (ignore-errors
      (let ((packages (cl-remove-if 'package-installed-p packages)))
	(when packages
	  ;; Install uninstalled packages
	  (package-refresh-contents)
	  (mapc 'package-install packages)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(set-language-environment "UTF-8")
#+END_SRC

#+begin_src emacs-lisp
(require 'yasnippet)
#+end_src

#+BEGIN_SRC emacs-lisp
(dolist (mode
	 '(menu-bar-mode
	   tool-bar-mode
	   scroll-bar-mode
	   blink-cursor-mode))
  (funcall mode 0))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(dolist (mode
	 '(projectile-global-mode
	   global-company-mode
	   column-number-mode
	   show-paren-mode
	   yas-global-mode
	   ivy-mode
	   counsel-mode
	   which-key-mode
	   ; global-whitespace-mode
	   ))
  (funcall mode 1))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; (add-to-list 'custom-theme-load-path (expand-file-name "~/.emacs.d/themes/"))
(load-theme 'modus-operandi t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :font "Fira Code-12")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(add-hook 'cider-repl-mode-hook
	  (lambda () (local-set-key (kbd "C-l") 'cider-repl-clear-buffer)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(dolist (mode '(cider-repl-mode
		clojure-mode
		lisp-mode
		emacs-lisp-mode
		lisp-interaction-mode
		rainbow-delimiters-mode))
  ;; add paredit-mode to all mode-hooks
  (add-hook (intern (concat (symbol-name mode) "-hook")) 'paredit-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(add-hook 'clojure-mode-hook 'rainbow-delimiters-mode)
(require 'whitespace) ; require whitespace to avoid free variable assignment warnings
(add-hook 'clojure-mode-hook (lambda ()
			       (setq whitespace-line-column 80)
			       (setq whitespace-style '(face lines-tail))
			       (whitespace-mode)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-;") 'avy-goto-char)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq projectile-completion-system 'ivy)
(setq projectile-create-missing-test-files t)
(global-set-key (kbd "C-s") 'swiper)
(global-set-key (kbd "C-c g") 'counsel-rg)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "C-c M-r") 'ivy-resume)
;; (global-set-key (kbd "C-c b") 'counsel-bookmark)
;; (global-set-key (kbd "C-c d") 'counsel-descbinds)
;; (global-set-key (kbd "C-c g") 'counsel-git)
;; (global-set-key (kbd "C-c o") 'counsel-outline)
;; (global-set-key (kbd "C-c t") 'counsel-load-theme)
;; (global-set-key (kbd "C-c F") 'counsel-org-file)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(define-key projectile-mode-map (kbd "H-s-p") 'projectile-command-map)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq ivy-initial-inputs-alist nil)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
      backup-by-copying t    ; Don't delink hardlinks
      version-control t      ; Use version numbers on backups
      delete-old-versions t  ; Automatically delete excess backups
      kept-new-versions 20   ; how many of the newest versions to keep
      kept-old-versions 5    ; and how many of the old
      )
#+END_SRC

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(require 'clojure-mode)

(define-clojure-indent
  (defroutes 'defun)
  (GET 2)
  (POST 2)
  (PUT 2)
  (DELETE 2)
  (HEAD 2)
  (ANY 2)
  (OPTIONS 2)
  (PATCH 2)
  (rfn 2)
  (let-routes 1)
  (context 2))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-p") 'scroll-down-line)
(global-set-key (kbd "M-n") 'scroll-up-line)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-confirm-babel-evaluate nil)
(org-babel-do-load-languages
 'org-babel-load-languages
 '((shell      . t)
   (emacs-lisp . t)
   (calc       . t)
   (clojure    . t)
   ;; (python     . t)
   ;; (restclient . t)
   ;; (dot        . t)
   ;; (ditaa      . t)
   ;; (css        . t)
   ;; (plantuml   . t)
   ))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; (setq org-edit-src-content-indentation 0
;;       org-src-tab-acts-natively t
;;       org-src-preserve-indentation t)
(setq org-src-window-setup 'current-window)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-o") 'ace-window)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun toggle-window-dedicated ()
  "Control whether or not Emacs is allowed to display another
buffer in current window."
  (interactive)
  (message
   (if (set-window-dedicated-p
	(get-buffer-window (current-buffer))
	(not (window-dedicated-p (get-buffer-window (current-buffer)))))
       "%s: Can't touch this!"
     "%s is up for grabs.")
   (current-buffer)))

(global-set-key (kbd "C-c t") 'toggle-window-dedicated)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file)
#+END_SRC

#+begin_src emacs-lisp
(setq-default bidi-paragraph-direction 'left-to-right)
#+end_src

#+begin_src emacs-lisp
(setq css-indent-offset 2)
#+end_src

#+begin_src emacs-lisp
(setq js-indent-level 2)
#+end_src
